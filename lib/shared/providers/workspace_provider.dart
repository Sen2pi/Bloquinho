import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:bloquinho/core/models/workspace.dart';
import 'package:bloquinho/core/models/user_profile.dart';
import 'package:bloquinho/core/services/workspace_storage_service.dart';
import 'package:bloquinho/shared/providers/user_profile_provider.dart';

class WorkspaceNotifier extends StateNotifier<Workspace?> {
  final WorkspaceStorageService _storageService;

  WorkspaceNotifier(this._storageService)
      : super(DefaultWorkspaces.workspaces.first) {
    // DEBUG: Log da inicializa√ß√£o
    debugPrint(
        'üîç WorkspaceNotifier inicializado com workspace: ${state?.name} (${state?.id})');
    debugPrint(
        'üîç Workspace padr√£o: ${DefaultWorkspaces.workspaces.first.name} (${DefaultWorkspaces.workspaces.first.id})');
  }

  /// Obter workspace padr√£o (Pessoal)
  Workspace get defaultWorkspace => DefaultWorkspaces.workspaces.first;

  /// Obter workspace atual ou padr√£o se n√£o houver
  Workspace get currentWorkspaceOrDefault {
    final current = state ?? defaultWorkspace;
    debugPrint('üîç currentWorkspaceOrDefault: ${current.name} (${current.id})');
    return current;
  }

  /// Obter ID do workspace atual ou padr√£o
  String get currentWorkspaceIdOrDefault {
    final id = currentWorkspaceOrDefault.id;
    debugPrint('üîç currentWorkspaceIdOrDefault: $id');
    return id;
  }

  /// Inicializar workspace padr√£o se n√£o houver workspace selecionado
  Future<void> initializeDefaultWorkspace() async {
    if (state == null) {
      debugPrint('üîç Inicializando workspace padr√£o: ${defaultWorkspace.name}');
      state = defaultWorkspace;

      // Atualizar contexto no WorkspaceStorageService
      await _updateWorkspaceContext(defaultWorkspace);
    } else {
      debugPrint('üîç Workspace j√° inicializado: ${state?.name}');
    }
  }

  Future<void> selectWorkspace(String workspaceId) async {
    debugPrint('üîç selectWorkspace chamado com ID: $workspaceId');

    final newWorkspace = DefaultWorkspaces.workspaces
        .firstWhere((element) => element.id == workspaceId);

    // S√≥ atualizar se realmente mudou
    if (state?.id != newWorkspace.id) {
      final oldWorkspace = state;
      debugPrint(
          'üîç Mudando workspace: ${oldWorkspace?.name} ‚Üí ${newWorkspace.name}');
      state = newWorkspace;

      // Atualizar contexto no WorkspaceStorageService
      await _updateWorkspaceContext(newWorkspace);

      // For√ßar recarregamento de todos os providers
      _notifyWorkspaceChange(newWorkspace, oldWorkspace);
    } else {
      debugPrint('üîç Workspace j√° selecionado: ${newWorkspace.name}');
    }
  }

  Future<void> _updateWorkspaceContext(Workspace workspace) async {
    try {
      // Obter perfil atual (assumindo que existe)
      final profile = await _getCurrentProfile();
      if (profile != null) {
        await _storageService.setContextFromProfile(profile, workspace.id);
        debugPrint('‚úÖ Contexto atualizado: ${profile.name}/${workspace.id}');
      } else {
        debugPrint('‚ö†Ô∏è Nenhum perfil encontrado para definir contexto');
      }
    } catch (e) {
      debugPrint('‚ùå Erro ao atualizar contexto do workspace: $e');
    }
  }

  Future<UserProfile?> _getCurrentProfile() async {
    try {
      // Tentar obter perfil do provider
      // Como n√£o temos acesso direto ao ref aqui, vamos usar uma abordagem diferente
      // O contexto ser√° definido pelos providers espec√≠ficos quando necess√°rio
      return null;
    } catch (e) {
      return null;
    }
  }

  void _notifyWorkspaceChange(Workspace newWorkspace, Workspace? oldWorkspace) {
    debugPrint(
        'üîÑ Notificando mudan√ßa de workspace: ${oldWorkspace?.name} ‚Üí ${newWorkspace.name}');
    // Este m√©todo ser√° usado para notificar outros providers sobre mudan√ßa de workspace
    // Aqui podemos adicionar l√≥gica para notificar outros providers
    // Por exemplo, for√ßar recarregamento de dados espec√≠ficos do workspace
  }

  /// Definir contexto manualmente (usado por outros providers)
  Future<void> setContext(UserProfile profile, String workspaceId) async {
    debugPrint('üîç setContext chamado: ${profile.name}/$workspaceId');
    await _storageService.setContextFromProfile(profile, workspaceId);
  }

  /// Obter contexto atual
  Map<String, String?> get currentContext => _storageService.currentContext;

  /// Verificar se tem contexto definido
  bool get hasContext => _storageService.hasContext;
}

final workspaceProvider =
    StateNotifierProvider<WorkspaceNotifier, Workspace?>((ref) {
  final storageService = WorkspaceStorageService();
  final notifier = WorkspaceNotifier(storageService);

  // Inicializar workspace padr√£o automaticamente
  WidgetsBinding.instance.addPostFrameCallback((_) async {
    debugPrint('üîç Inicializando workspace padr√£o automaticamente...');
    await notifier.initializeDefaultWorkspace();
  });

  return notifier;
});

final currentWorkspaceProvider = Provider<Workspace?>((ref) {
  final workspace = ref.watch(workspaceProvider);
  debugPrint(
      'üîç currentWorkspaceProvider: ${workspace?.name} (${workspace?.id})');
  return workspace;
});

final currentWorkspaceIdProvider = Provider<String?>((ref) {
  final workspace = ref.watch(currentWorkspaceProvider);
  final id = workspace?.id;
  debugPrint('üîç currentWorkspaceIdProvider: $id');
  return id;
});

// NOVO: Provider para workspace atual ou padr√£o (Pessoal)
final currentWorkspaceOrDefaultProvider = Provider<Workspace>((ref) {
  final notifier = ref.read(workspaceProvider.notifier);
  final workspace = notifier.currentWorkspaceOrDefault;
  debugPrint(
      'üîç currentWorkspaceOrDefaultProvider: ${workspace.name} (${workspace.id})');
  return workspace;
});

// NOVO: Provider para ID do workspace atual ou padr√£o
final currentWorkspaceIdOrDefaultProvider = Provider<String>((ref) {
  final notifier = ref.read(workspaceProvider.notifier);
  final id = notifier.currentWorkspaceIdOrDefault;
  debugPrint('üîç currentWorkspaceIdOrDefaultProvider: $id');
  return id;
});

// NOVO: Provider para workspace padr√£o (Pessoal)
final defaultWorkspaceProvider = Provider<Workspace>((ref) {
  final notifier = ref.read(workspaceProvider.notifier);
  return notifier.defaultWorkspace;
});

final currentWorkspaceSectionsProvider =
    Provider<List<WorkspaceSection>>((ref) {
  final workspaceId = ref.watch(currentWorkspaceIdOrDefaultProvider);
  debugPrint(
      'üîç currentWorkspaceSectionsProvider para workspace: $workspaceId');
  return WorkspaceSections.getSectionsForWorkspace(workspaceId);
});

final workspacesProvider = Provider<List<Workspace>>((ref) {
  return DefaultWorkspaces.workspaces;
});

/// Provider para for√ßar recarregamento de dados quando workspace muda
final workspaceChangeProvider = Provider<String>((ref) {
  final workspace = ref.watch(currentWorkspaceProvider);
  return workspace?.id ?? '';
});

/// Provider para notificar mudan√ßas de workspace
final workspaceChangeNotifierProvider =
    StateNotifierProvider<WorkspaceChangeNotifier, String>((ref) {
  return WorkspaceChangeNotifier();
});

class WorkspaceChangeNotifier extends StateNotifier<String> {
  WorkspaceChangeNotifier() : super('');

  void notifyWorkspaceChange(String workspaceId) {
    state = workspaceId;
  }
}

/// Provider para verificar se o workspace mudou
final workspaceChangeDetectorProvider = Provider<String>((ref) {
  final workspace = ref.watch(currentWorkspaceProvider);
  return workspace?.id ?? '';
});

/// Provider para for√ßar recarregamento de providers espec√≠ficos
final workspaceReloadTriggerProvider = Provider<String>((ref) {
  final workspace = ref.watch(currentWorkspaceProvider);
  return '${workspace?.id ?? ""}_${DateTime.now().millisecondsSinceEpoch}';
});

/// Provider para contexto do workspace (perfil + workspace)
final workspaceContextProvider = Provider<Map<String, String?>>((ref) {
  final notifier = ref.read(workspaceProvider.notifier);
  return notifier.currentContext;
});

/// Verificar se tem contexto definido
final hasWorkspaceContextProvider = Provider<bool>((ref) {
  final notifier = ref.read(workspaceProvider.notifier);
  return notifier.hasContext;
});

/// Provider para definir contexto do workspace
final workspaceContextNotifierProvider = Provider<WorkspaceNotifier>((ref) {
  return ref.read(workspaceProvider.notifier);
});

// NOVO: Providers espec√≠ficos para componentes que precisam do workspace default
// (exceto Bloquinho que j√° est√° funcional)

/// Provider para documentos com workspace default
final documentosWorkspaceProvider = Provider<String>((ref) {
  final workspaceId = ref.watch(currentWorkspaceIdOrDefaultProvider);
  debugPrint('üîç documentosWorkspaceProvider: $workspaceId');
  return workspaceId;
});

/// Provider para agenda com workspace default
final agendaWorkspaceProvider = Provider<String>((ref) {
  final workspaceId = ref.watch(currentWorkspaceIdOrDefaultProvider);
  debugPrint('üîç agendaWorkspaceProvider: $workspaceId');
  return workspaceId;
});

/// Provider para senhas com workspace default
final passwordsWorkspaceProvider = Provider<String>((ref) {
  final workspaceId = ref.watch(currentWorkspaceIdOrDefaultProvider);
  debugPrint('üîç passwordsWorkspaceProvider: $workspaceId');
  return workspaceId;
});

/// Provider para database com workspace default
final databaseWorkspaceProvider = Provider<String>((ref) {
  final workspaceId = ref.watch(currentWorkspaceIdOrDefaultProvider);
  debugPrint('üîç databaseWorkspaceProvider: $workspaceId');
  return workspaceId;
});

/// Provider para backup com workspace default
final backupWorkspaceProvider = Provider<String>((ref) {
  final workspaceId = ref.watch(currentWorkspaceIdOrDefaultProvider);
  debugPrint('üîç backupWorkspaceProvider: $workspaceId');
  return workspaceId;
});

/// Provider para profile com workspace default
final profileWorkspaceProvider = Provider<String>((ref) {
  final workspaceId = ref.watch(currentWorkspaceIdOrDefaultProvider);
  debugPrint('üîç profileWorkspaceProvider: $workspaceId');
  return workspaceId;
});
