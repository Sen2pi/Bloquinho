import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:flutter/foundation.dart';
import 'ai_config.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

class AIService {
  static const String _huggingFaceBaseUrl =
      'https://api-inference.huggingface.co/models';
  static const String _googleAIBaseUrl =
      'https://generativelanguage.googleapis.com/v1beta/models';

  /// Gera conte√∫do markdown usando Google AI (gratuito) ou Hugging Face
  static Future<String> generateMarkdownContent(String prompt,
      {String? model, required WidgetRef ref}) async {
    try {
      debugPrint('ü§ñ Tentando Google AI...');
      return await _generateWithGoogleAI(prompt, ref);
    } catch (e) {
      debugPrint('‚ùå Google AI falhou: $e');
      final huggingFaceToken = AIConfig.getHuggingFaceToken(ref);
      if (huggingFaceToken.isNotEmpty) {
        try {
          debugPrint('ü§ñ Tentando Hugging Face...');
          return await _generateWithHuggingFace(prompt, model, ref);
        } catch (e) {
          debugPrint('‚ùå Hugging Face falhou: $e');
          return _generateFallbackContent(prompt);
        }
      } else {
        return _generateFallbackContent(prompt);
      }
    }
  }

  /// Otimizado para gerar conte√∫do robusto com o Google AI
  static Future<String> _generateWithGoogleAI(
      String prompt, WidgetRef ref) async {
    final token = AIConfig.getGoogleAIToken(ref);
    if (token.isEmpty) {
      throw Exception(
          'Token do Google AI n√£o configurado. Configure em Settings > Configura√ß√µes de IA');
    }

    // Usando um modelo mais recente e a URL correta da API
    final uri =
        Uri.parse('$_googleAIBaseUrl/gemini-1.5-flash:generateContent?key=$token');

    final body = jsonEncode({
      'contents': [
        {
          'parts': [
            {
              'text':
                  'Gere uma p√°gina markdown robusta e visualmente atraente sobre: $prompt\n\n'
                      '**Diretrizes Estritas:**\n'
                      '1.  **√çcones:** Use emojis (√≠cones) relevantes para cada se√ß√£o ou item de lista para melhorar a legibilidade e o apelo visual (ex: ‚ú®, üöÄ, üí°, üìÑ, üîó).\n'
                      '2.  **Estrutura Avan√ßada:**\n'
                      '    - Utilize t√≠tulos e subt√≠tulos (`#`, `##`, `###`) para uma hierarquia clara.\n'
                      '    - Empregue **negrito** e *it√°lico* para √™nfase.\n'
                      '    - Crie `listas com marcadores` ou `numeradas` para organizar informa√ß√µes.\n'
                      '    - Se aplic√°vel, inclua `tabelas` para dados estruturados.\n'
                      '    - Use `blocos de cita√ß√£o` (> cita√ß√£o) para destacar informa√ß√µes importantes.\n'
                      '    - Adicione `links` se o contexto permitir.\n'
                      '    - Inclua `blocos de c√≥digo` (```) para exemplos de c√≥digo ou comandos.\n'
      '3.  **Qualidade:** O conte√∫do deve ser bem escrito, profissional e informativo.\n'
      '4.  **Idioma:** Responda em portugu√™s brasileiro.\n'
      '5.  **Sa√≠da:** Forne√ßa APENAS o conte√∫do markdown, sem nenhum texto ou explica√ß√£o adicional.'
            }
          ]
        }
      ],
      'generationConfig': {
        'temperature': 0.8,
        'topK': 40,
        'topP': 0.95,
        'maxOutputTokens': 4096, // Aumentado para p√°ginas mais completas
        'candidateCount': 1,
        'stopSequences': []
      },
      'safetySettings': [
        // Configura√ß√µes para evitar bloqueios desnecess√°rios
        {
          'category': 'HARM_CATEGORY_HARASSMENT',
          'threshold': 'BLOCK_MEDIUM_AND_ABOVE'
        },
        {
          'category': 'HARM_CATEGORY_HATE_SPEECH',
          'threshold': 'BLOCK_MEDIUM_AND_ABOVE'
        },
        {
          'category': 'HARM_CATEGORY_SEXUALLY_EXPLICIT',
          'threshold': 'BLOCK_MEDIUM_AND_ABOVE'
        },
        {
          'category': 'HARM_CATEGORY_DANGEROUS_CONTENT',
          'threshold': 'BLOCK_MEDIUM_AND_ABOVE'
        }
      ]
    });

    final response = await http.post(
      uri,
      headers: {'Content-Type': 'application/json'},
      body: body,
    );

    if (response.statusCode == 200) {
      final data = jsonDecode(response.body);

      // An√°lise robusta da resposta para evitar erros de '[]'
      if (data['candidates'] != null &&
          data['candidates'] is List &&
          data['candidates'].isNotEmpty) {
        final candidate = data['candidates'][0];
        if (candidate['content'] != null &&
            candidate['content']['parts'] != null &&
            candidate['content']['parts'] is List &&
            candidate['content']['parts'].isNotEmpty) {
          final generatedText = candidate['content']['parts'][0]['text'];
          if (generatedText != null) {
            return _ensureMarkdownFormat(generatedText);
          }
        }
      }

      // Trata casos de conte√∫do bloqueado
      if (data['promptFeedback'] != null) {
        final blockReason = data['promptFeedback']['blockReason'];
        debugPrint('Conte√∫do bloqueado por: $blockReason.');
        throw Exception(
            'O conte√∫do foi bloqueado por pol√≠ticas de seguran√ßa. Motivo: $blockReason');
      }

      throw Exception('Resposta da Google AI com formato inesperado ou vazia.');
    } else if (response.statusCode == 401) {
      throw Exception(
          'Token do Google AI inv√°lido ou expirado. Configure um token v√°lido em Configura√ß√µes de IA.');
    } else {
      throw Exception(
          'Erro na Google AI: ${response.statusCode} - ${response.body}');
    }
  }

  /// Fallback para Hugging Face com tratamento de erro aprimorado
  static Future<String> _generateWithHuggingFace(
      String prompt, String? model, WidgetRef ref) async {
    final selectedModel = model ?? AIConfig.defaultModel;
    final token = AIConfig.getHuggingFaceToken(ref);

    if (token.isEmpty) {
      throw Exception('Token do Hugging Face n√£o configurado');
    }

    final modelsToTry = [
      selectedModel,
      ...AIConfig.alternativeModels.where((m) => m != selectedModel)
    ];

    for (int i = 0; i < modelsToTry.length; i++) {
      final currentModel = modelsToTry[i];

      try {
        debugPrint(
            'ü§ñ Tentando modelo: $currentModel (${i + 1}/${modelsToTry.length})');

        final uri = Uri.parse('$_huggingFaceBaseUrl/$currentModel');
        final response = await http.post(
          uri,
          headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer $token',
          },
          body: jsonEncode({
            'inputs': _buildHuggingFacePrompt(prompt),
            'parameters': {
              'max_length': 1024,
              'temperature': 0.7,
              'do_sample': true,
              'top_p': 0.9,
              'repetition_penalty': 1.1,
              'return_full_text': false,
            },
            'options': {'wait_for_model': true, 'use_cache': false}
          }),
        );

        if (response.statusCode == 200) {
          // A extra√ß√£o de texto agora √© mais robusta
          final result = _extractGeneratedText(response.body);
          if (result.isNotEmpty &&
              !result.contains('Nenhum conte√∫do foi gerado')) {
            debugPrint('‚úÖ Sucesso com modelo: $currentModel');
            return result;
          }
          // Se o resultado for vazio, trata como falha e tenta o pr√≥ximo
          debugPrint('‚ö†Ô∏è Modelo $currentModel retornou resposta vazia.');
        } else if (response.statusCode == 401) {
          throw Exception(
              'Token do Hugging Face inv√°lido. Configure um token v√°lido em Configura√ß√µes de IA.');
        } else {
          debugPrint('‚ö†Ô∏è Modelo $currentModel falhou: ${response.statusCode}');
        }
      } catch (e) {
        debugPrint('‚ùå Erro com modelo $currentModel: $e');
        if (e.toString().contains('Token do Hugging Face inv√°lido')) {
          rethrow;
        }
      }
    }

    throw Exception('Todos os modelos do Hugging Face falharam');
  }

  /// Constr√≥i prompt otimizado para Hugging Face
  static String _buildHuggingFacePrompt(String prompt) {
    return '''
**Tarefa**: Gerar um documento markdown detalhado e bem formatado sobre o t√≥pico abaixo.

**T√≥pico**: $prompt

**Instru√ß√µes**:
- Use um t√≠tulo principal (`#`).
- Organize com subt√≠tulos (`##`, `###`).
- Utilize listas (`*` ou `-`) e **negrito** para clareza.
- Opcional: adicione emojis para apelo visual.
- Responda em portugu√™s.

**Documento Markdown**:
''';
  }

  /// Extra√ß√£o de texto robusta para Hugging Face
  static String _extractGeneratedText(String responseBody) {
    try {
      final data = jsonDecode(responseBody);
      String generatedText = '';

      if (data == null) return '';

      if (data is List && data.isNotEmpty) {
        final firstItem = data.first;
        if (firstItem is Map && firstItem.containsKey('generated_text')) {
          generatedText = firstItem['generated_text'] ?? '';
        }
      } else if (data is Map && data.containsKey('generated_text')) {
        generatedText = data['generated_text'] ?? '';
      } else if (data is List && data.isEmpty) {
        // Resposta '[]' √© tratada como falha do modelo
        return '';
      }

      final cleanText = _removeOriginalPrompt(generatedText);
      return _ensureMarkdownFormat(cleanText);
    } catch (e) {
      debugPrint('‚ùå Erro ao processar resposta do Hugging Face: $e');
      return ''; // Retorna vazio para indicar falha
    }
  }

  /// Remove prompt original da resposta
  static String _removeOriginalPrompt(String generatedText) {
    final lines = generatedText.split('\n');
    final filteredLines = lines.where((line) {
      final trimmed = line.trim();
      return !trimmed.startsWith('**Tarefa**:') &&
          !trimmed.startsWith('**T√≥pico**:') &&
          !trimmed.startsWith('**Instru√ß√µes**:') &&
          !trimmed.startsWith('**Documento Markdown**:') &&
          trimmed.isNotEmpty;
    }).toList();
    return filteredLines.join('\n').trim();
  }

  /// Garante formato markdown adequado
  static String _ensureMarkdownFormat(String text) {
    if (text.isEmpty) {
      return '# Conte√∫do\n\nNenhum conte√∫do foi gerado.';
    }
    String cleaned = text.trim();
    cleaned = cleaned.replaceAll(RegExp(r'\n{3,}'), '\n\n');
    return cleaned;
  }

  /// Conte√∫do de fallback quando todas as APIs falham
  static String _generateFallbackContent(String prompt) {
    return '''
# üìÑ $prompt

## Vis√£o Geral
Este documento foi gerado automaticamente sobre o tema: **$prompt**.

## Estrutura Sugerida
- **Introdu√ß√£o**: Apresenta√ß√£o do tema
- **Desenvolvimento**: Pontos principais
- **Detalhes**: Informa√ß√µes espec√≠ficas
- **Conclus√£o**: Resumo final

## Nota
*Para obter conte√∫do personalizado, verifique:*
- Conex√£o com a internet
- Configura√ß√£o das chaves de API
- Disponibilidade dos servi√ßos

---
*Conte√∫do gerado como fallback*
''';
  }

  /// Verifica disponibilidade dos servi√ßos
  static Future<bool> isAvailable(WidgetRef ref) async {
    try {
      final token = AIConfig.getGoogleAIToken(ref);
      if (token.isNotEmpty) {
        final response = await http.get(
          Uri.parse('$_googleAIBaseUrl/gemini-1.5-flash?key=$token'),
        );
        if (response.statusCode == 200) return true;
      }
    } catch (e) {
      debugPrint('Google AI n√£o dispon√≠vel: $e');
    }

    try {
      final token = AIConfig.getHuggingFaceToken(ref);
      if (token.isNotEmpty) {
        final response = await http.get(
          Uri.parse('$_huggingFaceBaseUrl/${AIConfig.defaultModel}'),
          headers: {'Authorization': 'Bearer $token'},
        );
        return response.statusCode == 200;
      }
    } catch (e) {
      debugPrint('Hugging Face n√£o dispon√≠vel: $e');
    }

    return false;
  }
}
