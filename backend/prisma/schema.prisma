generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  workspaces WorkspaceMember[]
  pages      Page[]
  blocks     Block[]
  comments   Comment[]

  @@map("users")
}

model Workspace {
  id          String   @id @default(cuid())
  name        String
  description String?
  icon        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  members WorkspaceMember[]
  pages   Page[]

  @@map("workspaces")
}

model WorkspaceMember {
  id          String @id @default(cuid())
  userId      String
  workspaceId String
  role        Role   @default(MEMBER)

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, workspaceId])
  @@map("workspace_members")
}

model Page {
  id          String   @id @default(cuid())
  title       String
  icon        String?
  cover       String?
  parentId    String?
  workspaceId String
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  parent    Page?  @relation("PageHierarchy", fields: [parentId], references: [id])
  children  Page[] @relation("PageHierarchy")
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  creator   User      @relation(fields: [createdBy], references: [id])
  blocks    Block[]
  comments  Comment[]

  @@map("pages")
}

model Block {
  id        String    @id @default(cuid())
  type      BlockType
  content   Json
  parentId  String?
  pageId    String
  order     Int
  createdBy String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  parent   Block?  @relation("BlockHierarchy", fields: [parentId], references: [id])
  children Block[] @relation("BlockHierarchy")
  page     Page    @relation(fields: [pageId], references: [id], onDelete: Cascade)
  creator  User    @relation(fields: [createdBy], references: [id])

  @@map("blocks")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  pageId    String
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  page    Page @relation(fields: [pageId], references: [id], onDelete: Cascade)
  creator User @relation(fields: [createdBy], references: [id])

  @@map("comments")
}

model Database {
  id          String   @id @default(cuid())
  name        String
  description String?
  properties  Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  rows DatabaseRow[]

  @@map("databases")
}

model DatabaseRow {
  id         String   @id @default(cuid())
  databaseId String
  data       Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  database Database @relation(fields: [databaseId], references: [id], onDelete: Cascade)

  @@map("database_rows")
}

enum Role {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum BlockType {
  TEXT
  HEADING_1
  HEADING_2
  HEADING_3
  BULLET_LIST
  NUMBERED_LIST
  TODO
  TOGGLE
  QUOTE
  DIVIDER
  IMAGE
  VIDEO
  AUDIO
  FILE
  CODE
  TABLE
  DATABASE
  EMBED
  BOOKMARK
}
